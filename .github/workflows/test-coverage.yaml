name: R package binary build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up R on the runner
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      # Step 3: Install Pandoc (if you're building vignettes)
      - name: Install Pandoc
        run: |
          choco install pandoc
          pandoc --version

      # Step 4: Install R dependencies
      - name: Install dependencies
        run: |
          Rscript -e 'install.packages("remotes")'
          Rscript -e 'remotes::install_deps(dependencies = TRUE)'

      # Step 5: Build the package and binary
      - name: Build package and binary
        run: |
          Rscript -e 'devtools::build(binary = TRUE)'  # Build the binary package

      # Step 6: Get the Version from DESCRIPTION
      - name: Get Version from DESCRIPTION
        id: get_version  # An ID to reference this step's output later
        run: |
          VERSION=$(grep -E '^Version:' DESCRIPTION | awk '{print $2}')
          echo "::set-output name=version::$VERSION"
      
      # Step 7: Create a Release and upload the binary to GitHub Releases using the version
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"  # Dynamically use the version
          release_name: "v${{ steps.get_version.outputs.version }} Release"
          body: "Release notes for version ${{ steps.get_version.outputs.version }}."
          draft: false  # Set to true if you want to manually review before publishing
          prerelease: false  # Set to true if this is a pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub

      # Step 8: Upload the binary as a release asset
      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "D:/a/tidBIT/tidBIT_*.zip"  # Adjust the path to match your binary file
          asset_name: "tidBIT-windows-binary.zip"
          asset_content_type: application/zip
